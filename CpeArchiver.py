from cpe import CPE
import xml.etree.ElementTree as ET
import psycopg2
import sys,json

jsonConfigFile = json.load(open("./setup/config.json"))

# ==============LOGIN DB===================
db_host = jsonConfigFile["db_host"]
db_port = jsonConfigFile["db_port"]
db_user = jsonConfigFile["db_user"]
db_password = jsonConfigFile["db_password"]
db_name = jsonConfigFile["db_name"]
db_table_name = jsonConfigFile["db_cpe_table"]
# ==============LOGIN DB===================

conn = psycopg2.connect(host=db_host, port=db_port, user=db_user,
                        password=db_password, database=db_name)
cursor = conn.cursor()


def isPresentInDB(product_tipology, vendor, product_name, product_version, product_version_update, product_edition, product_language, sw_edition, target_sw, target_hw, other):
    cursor.execute("SELECT * from " + db_table_name)
    cpeList = cursor.fetchall()
    if not cpeList:
        print("no list")
    else:
        for singleCPe in cpeList:
            cpeTUple = (singleCPe[0],product_tipology, vendor, product_name, product_version, product_version_update, product_edition, product_language, sw_edition, target_sw, target_hw, other)
            if singleCPe == cpeTUple:
            # if vuln[1] == product_tipology and vuln[2] == vendor and vuln[3] == product_name and vuln[4] == product_version and vuln[5] == product_version_update and vuln[6] == product_edition and vuln[7] == product_language and vuln[8] == sw_edition and vuln[9] == target_sw:
                print("is present")
                return True
    return False


tree = ET.parse(sys.argv[1])

root = tree.getroot()
for elem in root.findall("ns0:cpe-item/cpe-23:cpe23-item", namespaces={"cpe-23": "http://scap.nist.gov/schema/cpe-extension/2.3", "ns0": "http://cpe.mitre.org/dictionary/2.0"}):

    cpeFs = elem.get("name") #cpe in FS format
    cpe = CPE(cpeFs)
    # print(cpe)

    part = ""
    if cpe.get_part()[0] == "h":
        part = "hardware"
    elif cpe.get_part()[0] == "a":
        part = "application"
    else:
        part = "os"

    if not isPresentInDB(part, cpe.get_vendor()[0].replace("\\",""), cpe.get_product()[0], cpe.get_version()[0], cpe.get_update()[0], cpe.get_edition()[0], cpe.get_language()[0], cpe.get_software_edition()[0], cpe.get_target_software()[0], cpe.get_target_hardware()[0], cpe.get_other()[0]):
        cursor.execute("INSERT INTO " + db_table_name + "(product_tipology, vendor, product_name, product_version ,product_version_update ,product_edition,product_language, sw_edition,target_sw,target_hw, other) VALUES(%s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s)",
                       (part, cpe.get_vendor()[0].replace("\\",""), cpe.get_product()[0], cpe.get_version()[0], cpe.get_update()[0], cpe.get_edition()[0], cpe.get_language()[0], cpe.get_software_edition()[0], cpe.get_target_software()[0], cpe.get_target_hardware()[0], cpe.get_other()[0]))
    conn.commit()

cursor.close()
conn.close()
